{"version":3,"sources":["../src/actions/createWallet.ts","../src/utils/transactionLogger.ts","../src/actions/sendTransaction.ts","../src/actions/getBalance.ts"],"sourcesContent":["import axios from 'axios';\nimport { Action, IAgentRuntime, Memory, State } from '@ai16z/eliza';\nimport { logTransaction } from '../utils/transactionLogger';\n\nexport interface CreateWalletParams {\n  network: string;\n  credentials: {\n    appId: string;\n    secret: string;\n  };\n}\n\nexport interface CreateWalletResponse {\n  address: string;\n  network: string;\n}\n\nexport const createWalletAction: Action = {\n  name: 'createWallet',\n  description: 'Creates a new Privy server wallet',\n  similes: [\n    'create a new wallet',\n    'initialize a blockchain wallet',\n    'set up a new wallet'\n  ],\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Create a new wallet on Ethereum network\"\n        }\n      },\n      {\n        user: \"{{agentName}}\",\n        content: {\n          text: \"Created new wallet on Ethereum network with address 0xabc...\"\n        }\n      }\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Initialize a server wallet on Polygon\"\n        }\n      },\n      {\n        user: \"{{agentName}}\",\n        content: {\n          text: \"Initialized new wallet on Polygon network with address 0xdef...\"\n        }\n      }\n    ]\n  ],\n  validate: async (runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n    const params = message.content as unknown as CreateWalletParams;\n    return !!(params?.network && params?.credentials?.appId && params?.credentials?.secret);\n  },\n\n  async handler(runtime: IAgentRuntime, message: Memory, _state?: State) {\n    const params = message.content as unknown as CreateWalletParams;\n    const { network, credentials } = params;\n    const { appId, secret } = credentials;\n\n    if (!appId || !secret) {\n      throw new Error('Missing required credentials');\n    }\n\n    try {\n      const response = await axios.post(\n        'https://auth.privy.io/api/v1/server_wallets',\n        { network },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${secret}`,\n            'X-App-Id': appId,\n          },\n        }\n      );\n\n      const wallet = {\n        address: response.data.address,\n        network: response.data.network,\n      };\n\n      // Log wallet creation\n      await logTransaction(runtime, {\n        type: 'WALLET_CREATION',\n        network: wallet.network,\n        address: wallet.address,\n        timestamp: new Date().toISOString(),\n      });\n\n      return wallet;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        throw new Error(`Failed to create wallet: ${error.response?.data?.message || error.message}`);\n      }\n      throw error;\n    }\n  },\n};\n","import { Runtime } from '@graviton/agent-core';\n\ninterface TransactionLog {\n  type: 'TRANSACTION' | 'WALLET_CREATION';\n  hash?: string;\n  network: string;\n  from?: string;\n  to?: string;\n  value?: string;\n  address?: string;\n  timestamp: string;\n}\n\nexport async function logTransaction(runtime: Runtime, log: TransactionLog): Promise<void> {\n  const memory = runtime.memory;\n  \n  // Create a memory entry for the transaction\n  await memory.remember({\n    type: 'blockchain_transaction',\n    content: JSON.stringify(log),\n    metadata: {\n      type: log.type,\n      network: log.network,\n      timestamp: log.timestamp,\n      ...(log.hash && { hash: log.hash }),\n      ...(log.from && { from: log.from }),\n      ...(log.to && { to: log.to }),\n      ...(log.address && { address: log.address }),\n    },\n  });\n}\n","import axios from 'axios';\nimport { Action, IAgentRuntime, Memory, State } from '@ai16z/eliza';\nimport { logTransaction } from '../utils/transactionLogger';\n\nexport interface SendTransactionParams {\n  walletAddress: string;\n  network: string;\n  to: string;\n  value: string;\n  data?: string;\n  credentials: {\n    appId: string;\n    secret: string;\n  };\n}\n\nexport interface SendTransactionResponse {\n  hash: string;\n  network: string;\n  from: string;\n  to: string;\n  value: string;\n}\n\nexport const sendTransactionAction: Action = {\n  name: 'sendTransaction',\n  description: 'Sends a transaction from a Privy server wallet',\n  similes: [\n    'send tokens',\n    'transfer funds',\n    'make a transaction'\n  ],\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Send 0.1 ETH from wallet 0xabc... to 0x123...\"\n        }\n      },\n      {\n        user: \"{{agentName}}\",\n        content: {\n          text: \"Transaction sent successfully. Hash: 0x789...\"\n        }\n      }\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Transfer 1 SOL from wallet abc to xyz\"\n        }\n      },\n      {\n        user: \"{{agentName}}\",\n        content: {\n          text: \"Transaction sent successfully. Hash: abc123...\"\n        }\n      }\n    ]\n  ],\n  validate: async (runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n    const params = message.content as unknown as SendTransactionParams;\n    return !!(\n      params?.walletAddress &&\n      params?.network &&\n      params?.to &&\n      params?.value &&\n      params?.credentials?.appId &&\n      params?.credentials?.secret\n    );\n  },\n\n  async handler(runtime: IAgentRuntime, message: Memory, _state?: State) {\n    const params = message.content as unknown as SendTransactionParams;\n    const { walletAddress, network, to, value, data, credentials } = params;\n    const { appId, secret } = credentials;\n\n    if (!appId || !secret) {\n      throw new Error('Missing required credentials');\n    }\n\n    try {\n      const response = await axios.post(\n        `https://auth.privy.io/api/v1/server_wallets/${walletAddress}/transactions`,\n        {\n          network,\n          to,\n          value,\n          data,\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${secret}`,\n            'X-App-Id': appId,\n          },\n        }\n      );\n\n      const transaction = {\n        hash: response.data.hash,\n        network,\n        from: walletAddress,\n        to,\n        value,\n      };\n\n      // Log transaction\n      await logTransaction(runtime, {\n        type: 'TRANSACTION',\n        hash: transaction.hash,\n        network: transaction.network,\n        from: transaction.from,\n        to: transaction.to,\n        value: transaction.value,\n        timestamp: new Date().toISOString(),\n      });\n\n      return transaction;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        throw new Error(`Failed to send transaction: ${error.response?.data?.message || error.message}`);\n      }\n      throw error;\n    }\n  },\n};\n","import axios from 'axios';\nimport { Action, IAgentRuntime, Memory, State } from '@ai16z/eliza';\n\nexport interface GetBalanceParams {\n  walletAddress: string;\n  network: string;\n  credentials: {\n    appId: string;\n    secret: string;\n  };\n}\n\nexport interface TokenBalance {\n  token: string;\n  amount: string;\n  symbol: string;\n  decimals: number;\n}\n\nexport interface GetBalanceResponse {\n  address: string;\n  network: string;\n  nativeBalance: string;\n  tokens?: TokenBalance[];\n}\n\nexport const getBalanceAction: Action = {\n  name: 'getBalance',\n  description: 'Gets the balance of a Privy server wallet',\n  similes: [\n    'check wallet balance',\n    'view account balance',\n    'get token balance'\n  ],\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Check balance of wallet 0xabc... on Ethereum\"\n        }\n      },\n      {\n        user: \"{{agentName}}\",\n        content: {\n          text: \"Wallet 0xabc... has a balance of 1.5 ETH\"\n        }\n      }\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Get balance for address 0x123... on Polygon\"\n        }\n      },\n      {\n        user: \"{{agentName}}\",\n        content: {\n          text: \"Wallet 0x123... has a balance of 100 MATIC\"\n        }\n      }\n    ]\n  ],\n  validate: async (runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n    const params = message.content as unknown as GetBalanceParams;\n    return !!(\n      params?.walletAddress &&\n      params?.network &&\n      params?.credentials?.appId &&\n      params?.credentials?.secret\n    );\n  },\n\n  async handler(runtime: IAgentRuntime, message: Memory, _state?: State) {\n    const params = message.content as unknown as GetBalanceParams;\n    const { walletAddress, network, credentials } = params;\n    const { appId, secret } = credentials;\n\n    if (!appId || !secret) {\n      throw new Error('Missing required credentials');\n    }\n\n    try {\n      const response = await axios.get(\n        `https://auth.privy.io/api/v1/server_wallets/${walletAddress}/balance`,\n        {\n          params: { network },\n          headers: {\n            'Authorization': `Bearer ${secret}`,\n            'X-App-Id': appId,\n          },\n        }\n      );\n\n      return {\n        address: walletAddress,\n        network,\n        nativeBalance: response.data.nativeBalance,\n        tokens: response.data.tokens,\n      };\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        throw new Error(`Failed to get balance: ${error.response?.data?.message || error.message}`);\n      }\n      throw error;\n    }\n  },\n};\n"],"mappings":"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","names":["axios","axios","axios"]}